package org.reactome.harmonizome;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.junit.Test;

/**
 * This class is modified from the Python script provided by the Harmonizome project:
 * https://amp.pharm.mssm.edu/Harmonizome/static/harmonizomedownloader.py
 * @author wug
 *
 */
public class DataDownloader {
    
    public DataDownloader() {
    }
    
    @Test
    public void downloadDatasets() throws Exception {
        Map<String, String> datasetToPath = getDataSet2Path();
        List<String> datasets = loadReactomeIDGDatasets();
        for (String dataset : datasets) {
            String path = datasetToPath.get(dataset);
            if (path == null)
                throw new IllegalStateException("Cannot find path for " + dataset);
        }
    }
    
    private List<String> loadReactomeIDGDatasets() throws IOException {
        String fileName = "Harmonizome_datasets_annotations_062819.txt";
        InputStream is = getClass().getClassLoader().getResourceAsStream(fileName);
        Scanner scanner = new Scanner(is);
        List<String> rtn = new ArrayList<>();
        String line = scanner.nextLine(); // Escape the first head line
        while (scanner.hasNextLine()) {
            line = scanner.nextLine();
            String[] tokens = line.split("\t");
            if (tokens[12].equals("false"))
                continue;
            // The actual data set name is the combination of the first two tokens
            if (tokens[1].length() > 0) // We need to use shortname is it is available
                rtn.add(tokens[1] + " " + tokens[2]);
            else {
                String db = tokens[0];
                if (db.startsWith("\"")) {
                    db = db.substring(1, db.length() - 1);
                }
                rtn.add(db + " " + tokens[2]);
            }
        }
        scanner.close();
        is.close();
        return rtn;
    }
    
    private Map<String, String> getDataSet2Path() throws Exception {
        // This file was generated by copying the python code:
        // https://amp.pharm.mssm.edu/Harmonizome/static/harmonizomedownloader.py
        // We need to get the path name for each data set
        String fileName = "Harmonizome_data_mapping.txt";
        // The file will be copied together with classes in the top-most level.
        // We need to use ClassLoader to avoid using the sub package
        InputStream is = getClass().getClassLoader().getResourceAsStream(fileName);
        Map<String, String> dataset2Path = new HashMap<>();
        Scanner scanner = new Scanner(is);
        String line = null;
        Pattern pattern = Pattern.compile("'([^']+)'");
        int index = 0;
        while (scanner.hasNextLine()) {
            line = scanner.nextLine();
            if (line.startsWith("##"))
                continue; // Escape some comments
            Matcher matcher = pattern.matcher(line);
            index = 0;
            String dataset = null;
            String path = null;
            while (matcher.find(index)) {
                // Group 1 gives us the actual value without ''
                String token = matcher.group(1);
                if (index == 0)
                    dataset = token;
                else
                    path = token;
                index = matcher.end();
            }
//            System.out.println(line);
//            System.out.println(dataset + " -> " + path);
            dataset2Path.put(dataset, path);
        }
        scanner.close();
        is.close();
        // Some datasets are not convered by Python script
        dataset2Path.put("LINCS Kinativ Kinase Inhibitor Bioactivity Profiles", "kinativ");
        dataset2Path.put("LINCS KinomeScan Kinase Inhibitor Targets", "kinomescan");
        return dataset2Path;
    }
    
    @Test
    public void testGetDataSet2Path() throws Exception {
        Map<String, String> dataset2Path = getDataSet2Path();
        System.out.println("DataSet2Path: " + dataset2Path.size());
        dataset2Path.forEach((data, path) -> System.out.println(data + " -> " + path));
    }

}
